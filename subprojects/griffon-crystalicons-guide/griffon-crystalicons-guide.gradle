buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/bmuschko/maven' }
        maven { url 'http://dl.bintray.com/content/bmuschko/gradle-plugins' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.0'
        classpath 'org.gradle.api.plugins:gradle-java2html-plugin:0.4'
    }
}

apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'java2html'

ext.childProjects = [
    ':griffon-crystalicons-core',
    ':griffon-crystalicons-swing',
    ':griffon-crystalicons-javafx',
    ':griffon-crystalicons-swing-groovy',
    ':griffon-crystalicons-javafx-groovy'
]

ext.childProjects.each { evaluationDependsOn it }

dependencies {
    java2html 'de.java2html:java2html:5.0'
}

task copyDocs(type: Copy) {
    destinationDir = "$buildDir/sources" as File
    project.ext.childProjects.each { projectName ->
        if (projectName.endsWith('-compile')) {
            from(project(projectName).sourceSets.main.allSource) {
                include 'griffon/transform/**/*'
                include 'griffon/metadata/**/*'
            }
        } else {
            from(project(projectName).sourceSets.main.allSource) {
                include '**/*.java'
                include '**/*.groovy'
            }
        }
    }
}

task apiDocs(type: Javadoc, dependsOn: copyDocs) {
    source = file("$buildDir/sources")
    destinationDir = file("$buildDir/api")
    title = "Griffon Crystal Icons Plugin $version"
    classpath = project.ext.childProjects.collect { projectName ->
        [project(projectName).sourceSets.main.output,
         project(projectName).configurations.compile,
         project(projectName).configurations.compileOnly]
    }.flatten().sum() as FileCollection

    excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

    options.use = true
    options.splitIndex = true
    options.encoding = 'UTF-8'
    options.author = true
    options.version = true
    options.source = project.sourceCompatibility
    options.overview = file('src/javadoc/overview.html')
    options.windowTitle = "griffon-crystalicons-plugin $version"
    options.docTitle = "griffon-crystalicons-plugin $version"
    options.footer = project.javadocFooter
    options.links = ['http://www.slf4j.org/apidocs/',
                     'http://junit.org/javadoc/latest/',
                     'http://docs.oracle.com/javase/7/docs/api/',
                     'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                     'http://atinject.googlecode.com/svn/trunk/javadoc/',
                     'http://griffon.github.io/griffon/guide/api/']

    doLast { task ->
        copy {
            into task.destinationDir
            from file('src/javadoc/resources/img/griffon.ico'),
                file('src/javadoc/resources/css/stylesheet.css')
        }
        copy {
            into file("${task.destinationDir}/resources")
            from file('src/javadoc/resources/img/')
        }
    }
}

task java2html {
    dependsOn apiDocs
    dependsOn "java2htmlGenerateOverview"
    dependsOn java2htmlConvertCode
}

task jarApi(type: Jar, dependsOn: apiDocs) {
    archiveName = "${pluginBaseName}-plugin-${version}-javadoc.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from "$buildDir/api"
}

task jarSourceHtml(type: Jar, dependsOn: java2html) {
    archiveName = "${pluginBaseName}-plugin-${version}-sources-html.jar"
    destinationDir = "$buildDir/assemble/jars" as File
    from "$buildDir/java2html"
}

task jarDocs(dependsOn: [jarApi, jarSourceHtml]) {}

java2html {
    conversion {
        srcDirs = files("$buildDir/sources")
        destDir = file("$buildDir/java2html")
        tabs = 4
        style = 'eclipse'
        outputFormat = 'html'
        showLineNumbers = true
        addLineAnchors = true
        showFileName = true
        useShortFileName = true
        overwrite = true
        showDefaultTitle = true
        includeDocumentHeader = true
        includeDocumentFooter = true
    }

    overview {
        srcDirs        = files("$buildDir/java2html")
        destDir        = file("$buildDir/java2html")
        windowTitle    = "Griffon Crystal Icons Plugin $version"
        docTitle       = "Griffon Crystal Icons Plugin $version"
        docDescription = "Griffon Crystal Icons Plugin $version"
        icon           = file('src/javadoc/resources/img/griffon.ico')
        stylesheet     = file('src/javadoc/resources/css/stylesheet.css')
    }
}

task generateIconCheatSheet << {
    File rootIconDir = project(':griffon-crystalicons-core').file('src/main/resources/com/everaldo/crystal')
    List sizes = [16, 24, 32]
    List categories = ['actions', 'apps', 'devices', 'filesystems', 'mimetypes']

    Map<String,Map<String,List>> data = [:]
    for (category in categories) {
        for (size in sizes) {
            new File(rootIconDir, "${size}x${size}/${category}".toString()).eachFileRecurse { file ->
                Map iconsPerCategory = data.get(category, [:])
                List sizesPerIcon = iconsPerCategory.get(file.name - '.png', [])
                sizesPerIcon << size
            }
        }
    }

    String document = '''
    [[icon_cheat_cheet]]
    = Icon Cheat Sheet

    The following tables show all available icons. Table names stand for categories. Note that
    some icons are not available for all sizes.

    '''.stripIndent(4)
    data.each { category, icons ->
        document += """
        .${category}
        [columns="4*", options="header"]
        |===
        | Name | 16 | 24 | 32
        """.stripIndent(8)

        icons.each { n, ss ->
            document += "| ${n} "
            document += ((16 in ss) ? "| image:16x16/$category/${n}.png[${n}]" : '| -')
            document += ((24 in ss) ? "| image:24x24/$category/${n}.png[${n}]" : '| -')
            document += ((32 in ss) ? "| image:32x32/$category/${n}.png[${n}]" : '| -')
            document += '\n'
        }

        document += '|===\n'
    }

    document += '\n\n'
    File f = file("${buildDir}/tmp/icon-cheat-sheet.adoc")
    f.parentFile.mkdirs()
    f.text = document
}

asciidoctor {
    dependsOn generateIconCheatSheet
    baseDir = project.file('src/asciidoc')
    options = [
        attributes: [
            toc                    : 'left',
            doctype                : 'book',
            icons                  : 'font',
            encoding               : 'utf-8',
            sectlink               : true,
            sectanchors            : true,
            numbered               : true,
            linkattrs              : true,
            imagesdir              : 'images',
            linkcss                : true,
            stylesheet             : 'css/style.css',
            'source-highlighter'   : 'coderay',
            'coderay-linenums-mode': 'table',
            'project-title'         : project.projectDescription,
            'project-author'        : 'Andres Almiray',
            'project-url'          : project.projectWebsiteUrl,
            'project-vcs'          : project.projectVcsUrl,
            'project-issue-tracker': project.projectIssueTrackerUrl,
            'griffon-version'      : rootProject.griffonVersion
        ]
    ]
    sourceDocumentNames = files('src/asciidoc/index.adoc')

    doFirst { task ->
        copy {
            into file("${task.outputDir}/images")
            from project(':griffon-crystalicons-core').file('src/main/resources/com/everaldo/crystal')
        }
    }

    doLast { task ->
        copy {
            into task.outputDir
            from file('src/resources')
        }
    }
}

task guide(type: Copy, dependsOn: [apiDocs, java2html, asciidoctor]) {
    destinationDir = "$buildDir/guide" as File
    from("$buildDir/api") { into 'api' }
    from("$buildDir/java2html") { into 'api-src' }
    from("$buildDir/asciidoc")
}

task guideZip(type: Zip, dependsOn: guide) {
    baseName = "${pluginBaseName}-guide"
    from "$buildDir/guide"
}
