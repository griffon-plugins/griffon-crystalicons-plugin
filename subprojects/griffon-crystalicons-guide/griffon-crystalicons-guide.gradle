buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/bmuschko/maven' }
        maven { url 'http://dl.bintray.com/content/bmuschko/gradle-plugins' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'com.bmuschko:gradle-java2html-plugin:2.0'
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.bmuschko.java2html'

ext.childProjects = [
    ':griffon-crystalicons-core',
    ':griffon-crystalicons-swing',
    ':griffon-crystalicons-javafx',
    ':griffon-crystalicons-swing-groovy',
    ':griffon-crystalicons-javafx-groovy'
]

ext.childProjects.each { evaluationDependsOn it }

dependencies {
    java2html 'de.java2html:java2html:5.0'
}

task copyDocs(type: Copy) {
    destinationDir = "${buildDir}/sources" as File
    project.ext.childProjects.each { projectName ->
        if (projectName.endsWith('-compile')) {
            from(project(projectName).sourceSets.main.allSource) {
                include 'griffon/transform/**/*'
                include 'griffon/metadata/**/*'
            }
        } else {
            from(project(projectName).sourceSets.main.allSource) {
                include '**/*.java'
                include '**/*.groovy'
                include '**/*.html'
            }
        }
    }
}

task apiDocs(type: Javadoc, dependsOn: copyDocs) {
    source          = copyDocs.destinationDir
    destinationDir  = file("${buildDir}/api")
    title           = "${pluginBaseName} ${project.version}"
    classpath       = project.ext.childProjects.collect { projectName ->
                          [project(projectName).sourceSets.main.output,
                           project(projectName).configurations.compile,
                           project(projectName).configurations.compileOnly]
                      }.flatten().sum() as FileCollection

    excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

    options.use         = true
    options.splitIndex  = true
    options.encoding    = 'UTF-8'
    options.author      = true
    options.version     = true
    options.source      = project.sourceCompatibility
    options.overview    = file('src/javadoc/overview.html')
    options.windowTitle = "${pluginBaseName} ${project.version}"
    options.docTitle    = "${pluginBaseName} ${project.version}"
    options.footer      = project.javadocFooter
    options.links       = ['http://www.slf4j.org/apidocs/',
                           'http://junit.org/junit4/javadoc/latest/',
                           'http://docs.oracle.com/javase/8/docs/api/',
                           'http://aalmiray.github.io/jsr-305/apidocs/',
                           'http://javax-inject.github.io/javax-inject/api/',
                           "http://griffon-framework.org/guide/${griffonVersion}/api".toString()]

    doLast { task ->
        copy {
            into task.destinationDir
            from file('src/javadoc/resources/img/griffon.ico'),
                 file('src/javadoc/resources/css/stylesheet.css')
        }
        copy {
            into file("${task.destinationDir}/resources")
            from file('src/javadoc/resources/img/')
        }
    }
}

task generateJava2html {
    dependsOn apiDocs
    dependsOn "java2htmlGenerateOverview"
    dependsOn java2htmlConvertCode
}

task javadocJar(type: Jar, dependsOn: apiDocs) {
    archiveName    = "${pluginBaseName}-plugin-${version}-javadoc.jar"
    destinationDir = "${buildDir}/assemble/jars" as File
    from apiDocs.destinationDir
}

task sourceHtmlJar(type: Jar, dependsOn: java2html) {
    archiveName    = "${pluginBaseName}-plugin-${version}-sources-html.jar"
    destinationDir = "${buildDir}/assemble/jars" as File
    from java2htmlConvertCode.destDir
}

task docsJar(dependsOn: [javadocJar, sourceHtmlJar]) { }

java2html {
    conversion {
        srcDirs = files(copyDocs.destinationDir)
        tabs = 4
        style = 'kawa'
        addLineAnchors = true
        showFileName = true
        useShortFileName = true
        overwrite = true
        showDefaultTitle = true
    }

    overview {
        windowTitle    = "${pluginBaseName} ${project.version}"
        docTitle       = "${pluginBaseName} ${project.version}"
        docDescription = "${pluginBaseName} ${project.version}"
        icon           = file('src/javadoc/resources/img/griffon.ico')
        stylesheet     = file('src/javadoc/resources/css/stylesheet.css')
    }
}

task generateIconCheatSheet {
    doFirst {
        File rootIconDir = project(':griffon-crystalicons-core').file('src/main/resources/com/everaldo/crystal')
        List sizes = [16, 24, 32]
        List categories = ['actions', 'apps', 'devices', 'filesystems', 'mimetypes']

        Map<String,Map<String,List>> data = [:]
        for (category in categories) {
            for (size in sizes) {
                new File(rootIconDir, "${size}x${size}/${category}".toString()).eachFileRecurse { file ->
                    Map iconsPerCategory = data.get(category, [:])
                    List sizesPerIcon = iconsPerCategory.get(file.name - '.png', [])
                    sizesPerIcon << size
                }
            }
        }

        String document = '''
        [[icon_cheat_cheet]]
        = Icon Cheat Sheet

        The following tables show all available icons. Table names stand for categories. Note that
        some icons are not available for all sizes.

        '''.stripIndent(8)
        data.each { category, icons ->
            document += """
            .${category}
            [columns="4*", options="header"]
            |===
            | Name | 16 | 24 | 32
            """.stripIndent(12)

            icons.each { n, ss ->
                document += "| ${n} "
                document += ((16 in ss) ? "| image:16x16/$category/${n}.png[${n}]" : '| -')
                document += ((24 in ss) ? "| image:24x24/$category/${n}.png[${n}]" : '| -')
                document += ((32 in ss) ? "| image:32x32/$category/${n}.png[${n}]" : '| -')
                document += '\n'
            }

            document += '|===\n'
        }

        document += '\n\n'
        File f = file("${buildDir}/tmp/icon-cheat-sheet.adoc")
        f.parentFile.mkdirs()
        f.text = document
    }
}

asciidoctor {
    dependsOn generateIconCheatSheet
    sourceDir = file('src/asciidoc')
    attributes = [
        toc                    : 'left',
        doctype                : 'book',
        icons                  : 'font',
        encoding               : 'utf-8',
        sectlink               : true,
        sectanchors            : true,
        numbered               : true,
        linkattrs              : true,
        imagesdir              : 'images',
        linkcss                : true,
        stylesheet             : 'css/style.css',
        'source-highlighter'   : 'coderay',
        'coderay-linenums-mode': 'table',
        'project-title'        : project.projectDescription,
        'project-author'       : 'Andres Almiray',
        'project-url'          : project.projectWebsiteUrl,
        'project-vcs'          : project.projectVcsUrl,
        'project-issue-tracker': project.projectIssueTrackerUrl,
        'griffon-version'      : rootProject.griffonVersion
    ]
    sources {
        include 'index.adoc'
    }
    resources {
        from file('src/resources')
        from(project(':griffon-crystalicons-core').file('src/main/resources/com/everaldo/crystal')) {
            into 'images'
        }
    }
}

task guide(type: Copy, dependsOn: [apiDocs, generateJava2html, asciidoctor]) {
    destinationDir = "${buildDir}/guide" as File
    from(apiDocs.destinationDir)       { into 'api' }
    from(java2htmlConvertCode.destDir) { into 'api-src'}
    from("${asciidoctor.outputDir}/html5")
}

task guideZip(type: Zip, dependsOn: guide) {
    baseName = "${pluginBaseName}-guide"
    from guide.destinationDir
}